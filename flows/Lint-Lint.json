{
	"schemaVersion": "4",
	"info": {
		"name": "Lint - post /lint"
	},
	"parameter": {
		"properties": {
			"params": {
				"type": "object",
				"description": "The parameters from the endpoint."
			},
			"request": {
				"type": "object",
				"description": "The HTTP request."
			},
			"config": {
				"type": "object",
				"description": "The service's configuration"
			},
			"env": {
				"type": "object",
				"description": "The host OS environment"
			}
		},
		"additionalProperties": false,
		"required": [
			"params",
			"request",
			"config",
			"env"
		]
	},
	"start": "setcontext.1",
	"nodes": {
		"http.1": {
			"type": "nodehandler://axway-flow/http",
			"name": "Success",
			"method": "setresponse",
			"parameters": [
				{
					"name": "status",
					"type": "number",
					"value": "200",
					"metaName": "Status",
					"metaDescription": "The HTTP status code"
				}
			],
			"outputs": {
				"next": {
					"context": "$.response",
					"routes": [],
					"metaName": "Next"
				}
			},
			"metaMethod": "Set HTTP Response"
		},
		"spectral.1": {
			"type": "nodehandler://@bladedancer/api-builder-plugin-spectral/spectral",
			"name": "Lint",
			"method": "lint",
			"parameters": [
				{
					"name": "type",
					"type": "string",
					"value": "\"oas\"",
					"metaName": "Type",
					"metaDescription": "The API Specification type."
				},
				{
					"name": "document",
					"type": "jsonpath",
					"value": "$.oas",
					"metaName": "Document",
					"metaDescription": "The API Specification to lint."
				}
			],
			"outputs": {
				"next": {
					"context": "$.lintresult",
					"routes": [
						"condition.2"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [
						"condition.2"
					],
					"metaName": "Error"
				}
			},
			"metaMethod": "Lint"
		},
		"condition.1": {
			"type": "nodehandler://axway-flow/condition",
			"name": "Exists",
			"method": "exists",
			"parameters": [
				{
					"name": "source",
					"type": "jsonpath",
					"value": "$.apiservicerevision",
					"metaName": "Source",
					"metaDescription": "The input to test."
				}
			],
			"outputs": {
				"true": {
					"routes": [
						"centralauth.1",
						"base64.1"
					],
					"context": "$.exists",
					"metaName": "True"
				},
				"false": {
					"routes": [
						"http.4"
					],
					"context": "$.exists",
					"metaName": "False"
				}
			},
			"metaMethod": "Exists"
		},
		"condition.3": {
			"type": "nodehandler://axway-flow/condition",
			"name": "IsHTTPError?",
			"method": "exists",
			"parameters": [
				{
					"name": "source",
					"type": "jsonpath",
					"value": "$.error.status",
					"metaName": "Source",
					"metaDescription": "The input to test."
				}
			],
			"outputs": {
				"true": {
					"routes": [
						"http.2"
					],
					"context": "$.exists",
					"metaName": "True"
				},
				"false": {
					"routes": [
						"http.3"
					],
					"context": "$.exists",
					"metaName": "False"
				}
			},
			"metaMethod": "Exists"
		},
		"http.2": {
			"type": "nodehandler://axway-flow/http",
			"name": "HTTPError",
			"method": "setresponse",
			"parameters": [
				{
					"name": "status",
					"type": "jsonpath",
					"value": "$.error.status",
					"metaName": "Status",
					"metaDescription": "The HTTP status code"
				},
				{
					"name": "body",
					"type": "jsonpath",
					"value": "$.error.data",
					"metaName": "Body",
					"metaDescription": "The response payload"
				},
				{
					"name": "headers",
					"type": "jsonpath",
					"value": "$.error.headers",
					"metaName": "Headers",
					"metaDescription": "Key-value pairs of headers"
				}
			],
			"outputs": {
				"next": {
					"context": "$.response",
					"routes": [],
					"metaName": "Next"
				}
			},
			"metaMethod": "Set HTTP Response"
		},
		"http.3": {
			"type": "nodehandler://axway-flow/http",
			"name": "UnexpectedError",
			"method": "setresponse",
			"parameters": [
				{
					"name": "status",
					"type": "number",
					"value": "500",
					"metaName": "Status",
					"metaDescription": "The HTTP status code"
				}
			],
			"outputs": {
				"next": {
					"context": "$.response",
					"routes": [],
					"metaName": "Next"
				}
			},
			"metaMethod": "Set HTTP Response"
		},
		"http.4": {
			"type": "nodehandler://axway-flow/http",
			"name": "BadRequest",
			"method": "setresponse",
			"parameters": [
				{
					"name": "status",
					"type": "number",
					"value": "400",
					"metaName": "Status",
					"metaDescription": "The HTTP status code"
				}
			],
			"outputs": {
				"next": {
					"context": "$.response",
					"routes": [],
					"metaName": "Next"
				}
			},
			"metaMethod": "Set HTTP Response"
		},
		"javascript.1": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-javascript/javascript",
			"name": "InjectResult",
			"method": "Execute",
			"parameters": [
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$",
					"metaName": "Data",
					"metaDescription": "The value to apply as the `data` argument to the JavaScript code. For objects and arrays, `data` is passed by reference."
				},
				{
					"name": "code",
					"type": "string",
					"value": "\"data.apiservicerevision.tags.push(`lint:${data.lintstatus}`);\\n  data.apiservicerevision.attributes.lint = data.lintstatus;\\n  data.apiservicerevision['x-lint'] = data.lintresult;\\n  return data.apiservicerevision;\"",
					"metaName": "Code",
					"metaDescription": "A JavaScript function body. Supports `await` and returning promises."
				}
			],
			"outputs": {
				"next": {
					"context": "$.apiservicerevision",
					"routes": [
						"condition.4"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [
						"condition.4"
					],
					"metaName": "Error"
				}
			},
			"metaMethod": "Execute"
		},
		"centralauth.1": {
			"type": "nodehandler://@bladedancer/api-builder-plugin-centralauth/centralauth",
			"name": "Authenticate with signed JWT",
			"method": "authenticateJWT",
			"parameters": [
				{
					"name": "kid",
					"type": "jsonpath",
					"value": "$.config.apiserver.kid",
					"metaName": "KID (Key Id)",
					"metaDescription": "The key id."
				},
				{
					"name": "privateKey",
					"type": "jsonpath",
					"value": "$.config.apiserver.privateKey",
					"metaName": "Private Key",
					"metaDescription": "The private key."
				},
				{
					"name": "sub",
					"type": "jsonpath",
					"value": "$.config.apiserver.sub",
					"metaName": "SUB (Subject)",
					"metaDescription": "The subject."
				}
			],
			"outputs": {
				"next": {
					"context": "$.accessToken",
					"routes": [
						"condition.2"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [
						"condition.2"
					],
					"metaName": "Error"
				}
			},
			"metaMethod": "Authenticate with signed JWT"
		},
		"javascript.3": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-javascript/javascript",
			"name": "Format Bearer Token",
			"method": "Execute",
			"parameters": [
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$.accessToken",
					"metaName": "Data",
					"metaDescription": "The value to apply as the `data` argument to the JavaScript code. For objects and arrays, `data` is passed by reference."
				},
				{
					"name": "code",
					"type": "string",
					"value": "\"return `Bearer ${data}`;\"",
					"metaName": "Code",
					"metaDescription": "A JavaScript function body. Supports `await` and returning promises."
				}
			],
			"outputs": {
				"next": {
					"context": "$.accessToken",
					"routes": [
						"condition.4"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [
						"condition.4"
					],
					"metaName": "Error"
				}
			},
			"metaMethod": "Execute"
		},
		"setcontext.1": {
			"type": "nodehandler://axway-flow/setcontext",
			"name": "Set API Service Revision",
			"method": "setcontext",
			"parameters": [
				{
					"name": "value",
					"type": "jsonpath",
					"value": "$.params.event.payload",
					"metaName": "Value"
				}
			],
			"outputs": {
				"next": {
					"context": "$.apiservicerevision",
					"routes": [
						"condition.1"
					],
					"metaName": "Next"
				}
			},
			"metaMethod": "Set Context"
		},
		"condition.2": {
			"type": "nodehandler://axway-flow/condition",
			"name": "Has Error?",
			"method": "exists",
			"parameters": [
				{
					"name": "source",
					"type": "jsonpath",
					"value": "$.error",
					"metaName": "Source",
					"metaDescription": "The input to test."
				}
			],
			"outputs": {
				"true": {
					"routes": [
						"condition.3"
					],
					"context": "$.exists",
					"metaName": "True"
				},
				"false": {
					"routes": [
						"javascript.3",
						"javascript.2"
					],
					"context": "$.exists",
					"metaName": "False"
				}
			},
			"metaMethod": "Exists"
		},
		"base64.1": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-base64/base64",
			"name": "Extract Swagger",
			"method": "decode",
			"parameters": [
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$.apiservicerevision.spec.definition.value",
					"metaName": "Data",
					"metaDescription": "The data to decode."
				},
				{
					"name": "as",
					"type": "string",
					"value": "\"object\"",
					"metaName": "Decode data as",
					"metaDescription": "Expected decoded data format."
				}
			],
			"outputs": {
				"next": {
					"routes": [
						"spectral.1"
					],
					"context": "$.oas",
					"metaName": "Next"
				},
				"error": {
					"routes": [
						"condition.2"
					],
					"context": "$.error",
					"metaName": "Error"
				}
			},
			"metaMethod": "Decode"
		},
		"condition.4": {
			"type": "nodehandler://axway-flow/condition",
			"name": "Has Error?",
			"method": "exists",
			"parameters": [
				{
					"name": "source",
					"type": "jsonpath",
					"value": "$.error",
					"metaName": "Source",
					"metaDescription": "The input to test."
				}
			],
			"outputs": {
				"true": {
					"routes": [
						"condition.3"
					],
					"context": "$.exists",
					"metaName": "True"
				},
				"false": {
					"routes": [
						"apiserver.1",
						"apiserver.3"
					],
					"context": "$.exists",
					"metaName": "False"
				}
			},
			"metaMethod": "Exists"
		},
		"apiserver.2": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-swagger/apiserver",
			"name": "APIServiceRevision: Add x-lint",
			"method": "update_management_v1alpha1_Environment_APIServiceRevision_extension",
			"parameters": [
				{
					"name": "environmentName",
					"type": "jsonpath",
					"value": "$.apiservicerevision.metadata.scope.name",
					"metaName": "environmentName",
					"metaDescription": "Name of the Environment"
				},
				{
					"name": "name",
					"type": "jsonpath",
					"value": "$.apiservicerevision.name",
					"metaName": "name",
					"metaDescription": "The name of the APIServiceRevision"
				},
				{
					"name": "body",
					"type": "jsonpath",
					"value": "$.apiservicerevision",
					"metaName": "body",
					"metaDescription": "The request body.  Please refer to the info icon for schema."
				},
				{
					"name": "_server.url",
					"type": "jsonpath",
					"value": "$.config.apiserver.url",
					"metaName": "Server URL",
					"metaDescription": "The URL for the server."
				},
				{
					"name": "extension",
					"type": "string",
					"value": "\"x-lint\"",
					"metaName": "extension",
					"metaDescription": "Name of the extension"
				},
				{
					"name": "X-Axway-Tenant-Id",
					"type": "jsonpath",
					"value": "$.params.event.organization.id",
					"metaName": "X-Axway-Tenant-Id",
					"metaDescription": "The currently selected team if the user is using the system within a team context"
				}
			],
			"outputs": {
				"200": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "200"
				},
				"400": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "400"
				},
				"401": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "401"
				},
				"403": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "403"
				},
				"404": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "404"
				},
				"500": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "500"
				},
				"error": {
					"routes": [
						"condition.5"
					],
					"context": "$.error",
					"metaName": "Error"
				},
				"default": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "Default"
				}
			},
			"authorizations": [
				{
					"name": "token",
					"type": "jsonpath",
					"value": "$.accessToken"
				}
			],
			"metaMethod": "update_management_v1alpha1_Environment_APIServiceRevision_extension"
		},
		"apiserver.1": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-swagger/apiserver",
			"name": "APIServiceRevision: Update Attributes",
			"method": "update_management_v1alpha1_Environment_APIServiceRevision",
			"parameters": [
				{
					"name": "environmentName",
					"type": "jsonpath",
					"value": "$.apiservicerevision.metadata.scope.name",
					"metaName": "environmentName",
					"metaDescription": "Name of the Environment"
				},
				{
					"name": "name",
					"type": "jsonpath",
					"value": "$.apiservicerevision.name",
					"metaName": "name",
					"metaDescription": "The name of the APIServiceRevision"
				},
				{
					"name": "X-Axway-Tenant-Id",
					"type": "jsonpath",
					"value": "$.params.event.organization.id",
					"metaName": "X-Axway-Tenant-Id",
					"metaDescription": "The currently selected team if the user is using the system within a team context"
				},
				{
					"name": "body",
					"type": "jsonpath",
					"value": "$.apiservicerevision",
					"metaName": "body",
					"metaDescription": "The request body.  Please refer to the info icon for schema."
				},
				{
					"name": "_server.url",
					"type": "jsonpath",
					"value": "$.config.apiserver.url",
					"metaName": "Server URL",
					"metaDescription": "The URL for the server."
				}
			],
			"outputs": {
				"200": {
					"routes": [
						"apiserver.2"
					],
					"context": "$.response",
					"metaName": "200"
				},
				"400": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "400"
				},
				"401": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "401"
				},
				"403": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "403"
				},
				"404": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "404"
				},
				"500": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "500"
				},
				"error": {
					"routes": [
						"condition.5"
					],
					"context": "$.error",
					"metaName": "Error"
				},
				"default": {
					"routes": [
						"apiserver.2"
					],
					"context": "$.response",
					"metaName": "Default"
				}
			},
			"authorizations": [
				{
					"name": "token",
					"type": "jsonpath",
					"value": "$.accessToken"
				}
			],
			"metaMethod": "update_management_v1alpha1_Environment_APIServiceRevision"
		},
		"javascript.2": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-javascript/javascript",
			"name": "LintStatus",
			"method": "Execute",
			"parameters": [
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$",
					"metaName": "Data",
					"metaDescription": "The value to apply as the `data` argument to the JavaScript code. For objects and arrays, `data` is passed by reference."
				},
				{
					"name": "code",
					"type": "string",
					"value": "\"let pass = true;\\n  let warning = data.lintresult != null && data.lintresult.length > 0;\\n  for (let result of data.lintresult) {\\n    if (result.severity === 0) {\\n      pass = false;\\n      break;\\n    }\\n  }\\n  \\n  return !pass ? 'failure' : (warning ? 'warning' : 'clean');\"",
					"metaName": "Code",
					"metaDescription": "A JavaScript function body. Supports `await` and returning promises."
				}
			],
			"outputs": {
				"next": {
					"context": "$.lintstatus",
					"routes": [
						"javascript.1"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [
						"condition.4"
					],
					"metaName": "Error"
				}
			},
			"metaMethod": "Execute"
		},
		"apiserver.3": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-swagger/apiserver",
			"name": "APIService: Read",
			"method": "read_management_v1alpha1_Environment_APIService",
			"parameters": [
				{
					"name": "_server.url",
					"type": "jsonpath",
					"value": "$.config.apiserver.url",
					"metaName": "Server URL",
					"metaDescription": "The URL for the server."
				},
				{
					"name": "environmentName",
					"type": "jsonpath",
					"value": "$.apiservicerevision.metadata.scope.name",
					"metaName": "environmentName",
					"metaDescription": "Name of the Environment"
				},
				{
					"name": "name",
					"type": "jsonpath",
					"value": "$.apiservicerevision.spec.apiService",
					"metaName": "name",
					"metaDescription": "The name of the APIService"
				},
				{
					"name": "X-Axway-Tenant-Id",
					"type": "jsonpath",
					"value": "$.params.event.organization.id",
					"metaName": "X-Axway-Tenant-Id",
					"metaDescription": "The currently selected team if the user is using the system within a team context"
				}
			],
			"outputs": {
				"200": {
					"routes": [
						"setcontext.2"
					],
					"context": "$.apiservicerespone",
					"metaName": "200"
				},
				"400": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "400"
				},
				"401": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "401"
				},
				"403": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "403"
				},
				"404": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "404"
				},
				"500": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "500"
				},
				"error": {
					"routes": [
						"condition.5"
					],
					"context": "$.error",
					"metaName": "Error"
				},
				"default": {
					"routes": [
						"setcontext.2"
					],
					"context": "$.apiservice",
					"metaName": "Default"
				}
			},
			"authorizations": [
				{
					"name": "token",
					"type": "jsonpath",
					"value": "$.accessToken"
				}
			],
			"metaMethod": "read_management_v1alpha1_Environment_APIService"
		},
		"apiserver.4": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-swagger/apiserver",
			"name": "APIService: Update",
			"method": "update_management_v1alpha1_Environment_APIService",
			"parameters": [
				{
					"name": "environmentName",
					"type": "jsonpath",
					"value": "$.apiservice.metadata.scope.name",
					"metaName": "environmentName",
					"metaDescription": "Name of the Environment"
				},
				{
					"name": "name",
					"type": "jsonpath",
					"value": "$.apiservice.name",
					"metaName": "name",
					"metaDescription": "The name of the APIService"
				},
				{
					"name": "X-Axway-Tenant-Id",
					"type": "jsonpath",
					"value": "$.params.event.organization.id",
					"metaName": "X-Axway-Tenant-Id",
					"metaDescription": "The currently selected team if the user is using the system within a team context"
				},
				{
					"name": "body",
					"type": "jsonpath",
					"value": "$.apiservice",
					"metaName": "body",
					"metaDescription": "The request body.  Please refer to the info icon for schema."
				},
				{
					"name": "_server.url",
					"type": "jsonpath",
					"value": "$.config.apiserver.url",
					"metaName": "Server URL",
					"metaDescription": "The URL for the server."
				}
			],
			"outputs": {
				"200": {
					"routes": [
						"condition.6"
					],
					"context": "$.response",
					"metaName": "200"
				},
				"400": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "400"
				},
				"401": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "401"
				},
				"403": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "403"
				},
				"404": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "404"
				},
				"500": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "500"
				},
				"error": {
					"routes": [
						"condition.5"
					],
					"context": "$.error",
					"metaName": "Error"
				},
				"default": {
					"routes": [
						"condition.6"
					],
					"context": "$.response",
					"metaName": "Default"
				}
			},
			"authorizations": [
				{
					"name": "token",
					"type": "jsonpath",
					"value": "$.accessToken"
				}
			],
			"metaMethod": "update_management_v1alpha1_Environment_APIService"
		},
		"javascript.4": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-javascript/javascript",
			"name": "APIService: Inject Lint Result",
			"method": "Execute",
			"parameters": [
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$",
					"metaName": "Data",
					"metaDescription": "The value to apply as the `data` argument to the JavaScript code. For objects and arrays, `data` is passed by reference."
				},
				{
					"name": "code",
					"type": "string",
					"value": "\"data.apiservice.tags.push(`lint:${data.lintstatus}`);\\n  data.apiservice.attributes.lint = data.lintstatus;\\n  return data.apiservice;\"",
					"metaName": "Code",
					"metaDescription": "A JavaScript function body. Supports `await` and returning promises."
				}
			],
			"outputs": {
				"next": {
					"context": "$.apiservice",
					"routes": [
						"apiserver.4"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [
						"condition.5"
					],
					"metaName": "Error"
				}
			},
			"metaMethod": "Execute"
		},
		"setcontext.2": {
			"type": "nodehandler://axway-flow/setcontext",
			"name": "APIService: Extract",
			"method": "setcontext",
			"parameters": [
				{
					"name": "value",
					"type": "jsonpath",
					"value": "$.apiservicerespone.data",
					"metaName": "Value"
				}
			],
			"outputs": {
				"next": {
					"context": "$.apiservice",
					"routes": [
						"javascript.4"
					],
					"metaName": "Next"
				}
			},
			"metaMethod": "Set Context"
		},
		"apiserver.5": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-swagger/apiserver",
			"name": "APIServiceInstance:Find",
			"method": "list_management_v1alpha1_Environment_APIServiceInstance",
			"parameters": [
				{
					"name": "environmentName",
					"type": "jsonpath",
					"value": "$.apiservicerevision.metadata.scope.name",
					"metaName": "environmentName",
					"metaDescription": "Name of the Environment"
				},
				{
					"name": "X-Axway-Tenant-Id",
					"type": "jsonpath",
					"value": "$.params.event.organization.id",
					"metaName": "X-Axway-Tenant-Id",
					"metaDescription": "The currently selected team if the user is using the system within a team context"
				},
				{
					"name": "query",
					"type": "jsonpath",
					"value": "$.apiservicequery",
					"metaName": "query",
					"metaDescription": "Query string for filtering entity. Expressed in FIQL/RSQL language. Supported filters on resources:\n  * name\n  * tags\n  * attributes\n  * metadata.id\n  * metadata.references.id\n  * metadata.references.kind\n  * metadata.references.name\n  * metadata.resourceVersion\n  * metadata.audit.createTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd'T'HH:mm:ss.SSSZZZZ\n  * metadata.audit.modifyTimestamp - Date filter must be provided as epoch time or yyyy-MM-dd'T'HH:mm:ss.SSSZZZZ\n\nDocumentation link to help with multiple values for query: https://github.com/jirutka/rsql-parser\n"
				},
				{
					"name": "_server.url",
					"type": "jsonpath",
					"value": "$.config.apiserver.url",
					"metaName": "Server URL",
					"metaDescription": "The URL for the server."
				}
			],
			"outputs": {
				"200": {
					"routes": [
						"setcontext.3"
					],
					"context": "$.apiserviceinstanceresponse",
					"metaName": "200"
				},
				"400": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "400"
				},
				"401": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "401"
				},
				"403": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "403"
				},
				"404": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "404"
				},
				"500": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "500"
				},
				"error": {
					"routes": [
						"condition.5"
					],
					"context": "$.error",
					"metaName": "Error"
				},
				"default": {
					"routes": [
						"setcontext.3"
					],
					"context": "$.apiserviceinstanceresponse",
					"metaName": "Default"
				}
			},
			"authorizations": [
				{
					"name": "token",
					"type": "jsonpath",
					"value": "$.accessToken"
				}
			],
			"metaMethod": "list_management_v1alpha1_Environment_APIServiceInstance"
		},
		"apiserver.6": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-swagger/apiserver",
			"name": "ConsumerInstance:Create",
			"method": "create_management_v1alpha1_Environment_ConsumerInstance",
			"parameters": [
				{
					"name": "environmentName",
					"type": "jsonpath",
					"value": "$.apiservicerevision.metadata.scope.name",
					"metaName": "environmentName",
					"metaDescription": "Name of the Environment"
				},
				{
					"name": "X-Axway-Tenant-Id",
					"type": "jsonpath",
					"value": "$.params.event.organization.id",
					"metaName": "X-Axway-Tenant-Id",
					"metaDescription": "The currently selected team if the user is using the system within a team context"
				},
				{
					"name": "_server.url",
					"type": "jsonpath",
					"value": "$.config.apiserver.url",
					"metaName": "Server URL",
					"metaDescription": "The URL for the server."
				},
				{
					"name": "body",
					"type": "jsonpath",
					"value": "$.consumerinstance",
					"metaName": "body",
					"metaDescription": "The request body.  Please refer to the info icon for schema."
				}
			],
			"outputs": {
				"201": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "201"
				},
				"400": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "400"
				},
				"401": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "401"
				},
				"403": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "403"
				},
				"404": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "404"
				},
				"409": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "409"
				},
				"500": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "500"
				},
				"error": {
					"routes": [
						"condition.5"
					],
					"context": "$.error",
					"metaName": "Error"
				},
				"default": {
					"routes": [
						"condition.5"
					],
					"context": "$.response",
					"metaName": "Default"
				}
			},
			"authorizations": [
				{
					"name": "token",
					"type": "jsonpath",
					"value": "$.accessToken"
				}
			],
			"metaMethod": "create_management_v1alpha1_Environment_ConsumerInstance"
		},
		"condition.5": {
			"type": "nodehandler://axway-flow/condition",
			"name": "Has Errror?",
			"method": "exists",
			"parameters": [
				{
					"name": "source",
					"type": "jsonpath",
					"value": "$.error",
					"metaName": "Source",
					"metaDescription": "The input to test."
				}
			],
			"outputs": {
				"true": {
					"routes": [
						"condition.3"
					],
					"context": "$.exists",
					"metaName": "True"
				},
				"false": {
					"routes": [
						"http.1"
					],
					"context": "$.exists",
					"metaName": "False"
				}
			},
			"metaMethod": "Exists"
		},
		"setcontext.3": {
			"type": "nodehandler://axway-flow/setcontext",
			"name": "Set APIServuceInstance",
			"method": "setcontext",
			"parameters": [
				{
					"name": "value",
					"type": "jsonpath",
					"value": "$.apiserviceinstanceresponse.data[0]",
					"metaName": "Value"
				}
			],
			"outputs": {
				"next": {
					"context": "$.apiserviceinstance",
					"routes": [
						"javascript.6"
					],
					"metaName": "Next"
				}
			},
			"metaMethod": "Set Context"
		},
		"javascript.5": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-javascript/javascript",
			"name": "APIServiceInstance: Format query",
			"method": "Execute",
			"parameters": [
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$",
					"metaName": "Data",
					"metaDescription": "The value to apply as the `data` argument to the JavaScript code. For objects and arrays, `data` is passed by reference."
				},
				{
					"name": "code",
					"type": "string",
					"value": "\"return `metadata.references.name==${data.apiservicerevision.name}`;\"",
					"metaName": "Code",
					"metaDescription": "A JavaScript function body. Supports `await` and returning promises."
				}
			],
			"outputs": {
				"next": {
					"context": "$.apiservicequery",
					"routes": [
						"apiserver.5"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [
						"condition.5"
					],
					"metaName": "Error"
				}
			},
			"metaMethod": "Execute"
		},
		"javascript.6": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-javascript/javascript",
			"name": "ConsumerInstance: Format",
			"method": "Execute",
			"parameters": [
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$",
					"metaName": "Data",
					"metaDescription": "The value to apply as the `data` argument to the JavaScript code. For objects and arrays, `data` is passed by reference."
				},
				{
					"name": "code",
					"type": "string",
					"value": "\"const consumerInstance = {};\\n  consumerInstance.name = data.apiservicerevision.name;\\n  consumerInstance.title = data.apiservice.title;\\n  consumerInstance.spec = {};\\n  consumerInstance.spec.name = data.apiservicerevision.name;\\n  consumerInstance.spec.apiServiceInstance = data.apiserviceinstance.name;\\n  consumerInstance.spec.visibility = 'PUBLIC';\\n  consumerInstance.spec.version = 'v1';\\n  consumerInstance.spec.state = 'UNPUBLISHED';\\n  return consumerInstance;\"",
					"metaName": "Code",
					"metaDescription": "A JavaScript function body. Supports `await` and returning promises."
				}
			],
			"outputs": {
				"next": {
					"context": "$.consumerinstance",
					"routes": [
						"apiserver.6"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [
						"condition.5"
					],
					"metaName": "Error"
				}
			},
			"metaMethod": "Execute"
		},
		"condition.6": {
			"type": "nodehandler://axway-flow/condition",
			"name": "IsLintFailure?",
			"method": "equals",
			"parameters": [
				{
					"name": "source",
					"type": "jsonpath",
					"value": "$.lintstatus",
					"metaName": "Source",
					"metaDescription": "The input to test."
				},
				{
					"name": "value",
					"type": "string",
					"value": "\"failure\"",
					"metaName": "Value",
					"metaDescription": "The value to test input against."
				}
			],
			"outputs": {
				"true": {
					"routes": [
						"condition.5"
					],
					"context": "$.equals",
					"metaName": "True"
				},
				"false": {
					"routes": [
						"javascript.5"
					],
					"context": "$.equals",
					"metaName": "False"
				}
			},
			"metaMethod": "Equals"
		}
	}
}